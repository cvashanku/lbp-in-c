http://www.hackerrank.com/prakashlbp8pm

Why Logic Based Programming?
----------------------------
Coding | Programming | Logical Thinking......

1 Hr + 1 Hr practice

Technical Rounds
	1. Programming --> Codings 2/3
	2. HR ---> Interview Questions

What type of students can learn LBP?
-------------------------------------
Everyone

1. Final Year Students
2. Pre-Final Year Students
3. Working 
4. Love towards Programming
etc

Pre-requite?
------------
Basics of Programming is mandatory.

I dn't know any thing programming?
----------------------------------
Yes, Try to learn some programming

Style followed in this course?
------------------------------
Read the problem statement.
Read the problem statement.
Read the problem statement.
Read the problem statement. etc
See sample input and outputs
Think about logic
write sample logic
Build Programs in C, Java and Python (hackerrank.com)
Run Programs (Error Checking + Sample case is success)
Submit the program (10/10) ---> 1 Point

300+/310


Sum of digits between two numbers

Create a function that sums the total number of digits between two numbers inclusive. 
for example, if the numbers are 19 and 22, then (1+9)+(2+0)+(2+1)+(2+2)=19.

input ----------> two numbers from the user
constraints ----> no
output ---------> sum of digits

19---22 ====> 19,20,21,22 ===> 1+9,2+0,2+1,2+2 ===>10+2+3+4=19


sum=0;
for(i=n1;i<=n2;i++)
{
	sum=sum+sumofD(i);
}


C ===> fish sea/lack , cleaning, cokking, eat ---> 1 Day
Java=> cooking, eat	----> 1/2 day
Py ==> eat -----------> 30 min

in some interviews, they keep online test and 
ask to complete within 1 hr-- 2 programs..
iam facing difficulty to completed with in time.

one last question...
you are going to increase the difficulty level of programs 
as the course progressed...


Hackerrank link
Running Notes
Videos link


https://www.youtube.com/watch?v=ziZ0onLlDlw
https://www.youtube.com/watch?v=ziZ0onLlDlw&list=PLd3UqWTnYXOkDkFt1Wml-opajqAHiPs6-

https://www.hackerrank.com/lbptest


1) Datatypes
2) Input
3) Output
4) Operators
5) Control Flow Statements
6) Arrays
7) Strings

Datatypes:-
----------
The type of data using in the programming is called as data type.

Statically Typed Programming Languages
--------------------------------------
Compulsory we have to declare the type.
Ex:
	C, C++, Java

C =====>
	Integers ----> short int, int, long int
	Floating ----> float, double
	Characters --> char

Java ==>
	Integers ---> byte, short, int, long
	Floating ---> float, double
	Characters -> char
	Boolean ----> boolean

Dynamically Typed Programming Languages
----------------------------------------
No need to declare the type, based on content automatically it decide.
Ex:
	Java, Js, Python

int x = 10; or var x=10;

x=10

Python ==>
		01) int
		02) float
		03) str
		04) complex
		05) bool
		06) bytes
		07) bytearray
		08) list
		09) tuple
		10) set
		11) frozenset
		12) dict
		13) range
		14) None


Numbers
Strings
Arrays
Matrix
DSA

Input:-
------

scanf("format",&var);

%d	int
%f	float
%c	char
%s	Strings

Scanner obj = new Scanner(System.in);

int	obj.nextInt()
double	obj.nextDouble()
char    -------		obj.next().charAt(0)
String	obj.next()	stop reading when space is encountered
String	obj.nextLine()  stop reading when new line is encountered

int	int(input())
float	float(input())
str	input()

Output:
-------
printf("-----",list of variables);

%d	int
%f	float
%c	char
%s	Strings

System.out.print();
System.out.println();
System.out.printf();

print() 

10 forms of print statements


LBP001 : Even or Odd Number.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Implement a program to check whether the given number is even number or odd number.

input----------> An integer value 
contraint------> n>=0
output---------> even or odd or invalid

logic:
------
Read n value

if(condition)
{
	if(condition)
	{
		-----------
	}
	else
	{
		----------
	}
}
else
{
	---------------
}


if(n>=0)
{
	if(n%2==0)
	{
		print "even"
	}
	else
	{
		print "odd"
	}
}
else
{
	print "invalid"
}

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n;
    scanf("%d",&n);
    if(n>=0)
    {
        if(n%2==0)
            printf("even");
        else
            printf("odd");
    }
    else
    {
        printf("invalid");
    }
    return 0;
}

java implementation:
--------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int n = obj.nextInt();
        if(n>=0)
        {
            if(n%2==0)
                System.out.println("even");
            else
                System.out.println("odd");
        }
        else
            System.out.println("invalid");
    }
}

python implementation:
----------------------
n=int(input())
if n>=0:
    if n%2==0:
        print('even')
    else:
        print('odd')
else:
    print('invalid')

LBP002 : Weird or Not Weird.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Given an integer n, perform the following conditional actions,
If n is odd, print weird,
If n is even and in the inclusive range of 2 to 5, print not weird,
If n is even and in the inclusive range 6 to 20, print weird,
If n is even and greater than 20, print not weird.

input --------> An integer value from the user.
constraint ---> 1<=n<=100
output -------> Weird or Not Weird

logic:
------
read n value

if(n%2!=0)
{
	print weird
}
else
{
	if(n>=2 and n<=5)
		print not weird
	else if(n>=6 and n<=20)
		print weird
	else
		print not weird
}

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n;
    scanf("%d",&n);
    if(n%2!=0)
        printf("Weird");
    else{
        if(n>=2 && n<=5)
            printf("Not Weird");
        else if(n>=6 && n<=20)
            printf("Weird");
        else
            printf("Not Weird");
    }
    return 0;
}

Java Implementation:
--------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int n=obj.nextInt();
        if(n%2!=0)
            System.out.println("Weird");
        else
        {
            if(n>=2 && n<=5)
                System.out.println("Not Weird");
            else if(n>=6 && n<=20)
                System.out.println("Weird");
            else
                System.out.println("Not Weird");
        }
    }
}

python implementation:
----------------------
n=int(input())
if n%2!=0:
    print("Weird")
else:
    if n>=2 and n<=5:
        print("Not Weird")
    elif n>=6 and n<=20:
        print("Weird")
    else:
        print("Not Weird")


Sir, What is the return type of input() function in python

ans: string

LBP003 : Leap Year or Not
~~~~~~~~~~~~~~~~~~~~~~~~~
To check whether the given number is leap year or not.

input------> year from the user
constraint-> no constraint
output-----> leap year or not leap year

logic1:

if year%4==0 then leap year else not leap year.

logic2:

if (year%100!=0 and year%4==0) or (year%400==0) then leap year else not leap

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int year;
    scanf("%d",&year);
    if((year%100!=0 && year%4==0)||(year%400==0))
        printf("True");
    else
        printf("False");
    return 0;
}

java implementation:
-------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int year = obj.nextInt();
        if((year%100!=0 && year%4==0)||(year%400==0))
            System.out.println("True");
        else
            System.out.println("False");
    }
}

python implementation:
----------------------
1st version:
------------
year=int(input())
if (year%100!=0 and year%4==0) or year%400==0:
    print("True")
else:
    print("False")


0-false and non-0 true
false and true
False and True

==
!=
and
or all these operators returns True or False in python
or all these operators returns true or false in java

2nd version:
------------
year=int(input())
print((year%100!=0 and year%4==0) or year%400==0)

3rd version:
------------
import calendar
print(calendar.isleap(int(input())))


calendar.isleap(int(input()))
str(calendar.isleap(int(input())))
str(calendar.isleap(int(input()))).lower()

LBP004: e-commerce company Bookshelf.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The e-commerce company Bookshelf wishes to analyze its monthly sales data between minimum ranges 30 to maximum range 100. The company has categorized these book sales into four groups depending on the number of sales, with the help of these groups the company will know which stock they should increase or decrease in their inventory for the next month. The groups are as follows
Sales range		groups
30-50 ------------------> D
51-60 ------------------> C
61-80 ------------------> B
81-100 -----------------> A
Write an algorithm to find the group for the given book sale count.

input ---------> An integer salesCount represent total sales of a book. 
constraint ----> 30<=saleCount<=100
output --------> character representing the group of given sale count.

logic:
------
read saleCount

if saleCount>=30 and saleCount<=100
{
	if sc>=30 and sc<=50		D
	else if sc>=51 and sc<=60	C
	else if sc>=61 and sc<=80	B
	else				A
}

else if ------> <, <=, >, >=, == and !=
switch -------> == and !=

C Implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int sc;
    scanf("%d",&sc);
    if(sc>=30 && sc<=100)
    {
        if(sc>=30 && sc<=50)    printf("D");
        else if(sc>=51 && sc<=60)   printf("C");
        else if(sc>=61 && sc<=80)   printf("B");
        else    printf("A");
    }
    return 0;
}

Java Implementation:
--------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int sc = obj.nextInt();
        if(sc>=30 && sc<=100)
        {
            if(sc>=30 && sc<=50)    System.out.println("D");
            else if(sc>=51 && sc<=60)   System.out.println("C");
            else if(sc>=61 && sc<=80)   System.out.println("B");
            else    System.out.println("A");
        }
    }
}

python implementation:
----------------------
sc=int(input())
if sc>=30 and sc<=100:
    if sc>=30 and sc<=50:
        print("D")
    elif sc>=51 and sc<=60:
        print("C")
    elif sc>=61 and sc<=80:
        print("B")
    else:
        print("A")

LBP005: Next Number from Integer.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Implement a program that takes a number as an argument, increments the number by +1 and returns the result.

input -------> An integer value from the user.
constraint --> n>=0
output ------> An incremented integer value

logic:

read n value from the user.

C -----> n++
C++ ---> n++
Java --> n++
Python-> n=n+1 bc'z there is no increment and decrement operators in python

C Implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n;
    scanf("%d",&n);
    n++;
    printf("%d",n);
    return 0;
}

Java Implementation:
--------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int n = obj.nextInt();
        n++;
        System.out.println(n);
    }
}

Python Implementation:
----------------------
n=int(input())
n=n+1
print(n)


http://www.hackerrank.com/prakashlbp8pm


Hi
<your_name>
<your_registered_email_id>
LBP9
send whatsapp messaage to

K Prakash Babu
7386237319



LBP006: Free Coffee Cups.
~~~~~~~~~~~~~~~~~~~~~~~~~
Implement a program to calculate the free number of cups the user gets for a specified number of cups bought by the user. In this particular case, the user gets 1 cup free for every 6 cups bought. (Example: If the user buys 12 cups, he gets 2 cups free as per the Buy 6 Get 1 Free offer, and hence the output will be 12+2 = 14 cups).

input -------> The input here is the number of coffee cups bought by the user.
constraint --> number of cups>=1.
output ------> The output is the total number of cups the user gets including the free coffee cups

logic:

1	1
2	2
3	3
4	4
5	5
6	6+1=7
7	7+1=8
8	8+1=9
9	9+1=10
10	10+1=11
11	11+1=12
12	12+2=14
13	13+2=15
.
.
n	n+n/6

read n value and print n+n/6

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n;
    scanf("%d",&n);
    if(n>=1)
        printf("%d",n+n/6);
    return 0;
}

java implementation:
--------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int n=obj.nextInt();
        if(n>=1)
            System.out.println(n+n/6);
    }
}

python implementation:
----------------------
n=int(input())
print(n+n//6)

LBP007: Extract Digits from the number.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Implement a program to extract digits from the given number

input ---------> a number from the user
constraint ----> Number>0
output --------> print digits in line separated by space

7192 ------> 1) 7, 1, 9, 2 wrong approach
	     2) 2, 9, 1, 7


1's	2
10's	9
100's	1
1000's	7

output: 
2 9 1 7
2
9
1
7

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n,d;
    scanf("%d",&n);
    while(n!=0)
    {
        d=n%10;
        printf("%d ",d);
        n=n/10;
    }
    return 0;
}

java implmentation:
-------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int n = obj.nextInt();
        int d;
        while(n!=0)
        {
            d=n%10;
            System.out.print(d+" ");
            n=n/10;
        }
    }
}

python implementation:
----------------------
n=int(input())
while n!=0:
    d=n%10
    print(d,end=' ')
    n=n//10

LBP008: Sum of Digits.
~~~~~~~~~~~~~~~~~~~~~~
Implement a program to calculate sum of digits present in the given number.

input ---------> A number from the user 
constraint ----> Number>0
output --------> Print sum of digits

logic:

read n value from the user
sum=0;
while(n!=0)
{	
	d=n%10;
	sum=sum+d;
	n=n/10;
}
print sum

n=1234 ---> 10

sum	n	d	L.sum	L.n
------------------------------------
0	1234	4	0+4	123
4	123	3	4+3	12
7	12	2	7+2	1
9	1	1	9+1	0
10

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n,sum,d;
    scanf("%d",&n);
    sum=0;
    while(n!=0)
    {
        d=n%10;
        sum=sum+d;
        n=n/10;
    }
    printf("%d",sum);
    return 0;
}

java implementation:
-------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int n=obj.nextInt();
        int d,sum;
        sum=0;
        while(n!=0)
        {
            d=n%10;
            sum=sum+d;
            n=n/10;
        }
        System.out.println(sum);
    }
}

python implementation:
----------------------
n=int(input())
sum=0
while n!=0:
    d=n%10
    sum=sum+d
    n=n//10
print(sum)


LBP009: Sum of even digits.
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Implement a program to calculate sum of even digits present in the given number.

input ---------> A number from the user  
constraint ----> Number>0
output --------> Print sum of even digits

logic:

sum=0;
while(n!=0)
{
	d=n%10;
	if(d%2==0)
		sum=sum+d;
	n=n/10;
}
print sum;

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n,d,sum=0;
    scanf("%d",&n);
    while(n!=0)
    {
        d=n%10;
        if(d%2==0)
            sum=sum+d;
        n=n/10;
    }
    printf("%d",sum);
    return 0;
}

java implementation:
--------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int n=obj.nextInt(),d,sum=0;
        while(n!=0)
        {
            d=n%10;
            if(d%2==0)
                sum=sum+d;
            n=n/10;
        }
        System.out.println(sum);
    }
}

Ex:
print(sum([int(i) for i in input()])) ====> sum of elements
print(sum([int(i) for i in input() if int(i)%2==0])) ====> sum of even
print(sum([int(i) for i in input() if int(i)%2!=0])) ====> sum of odd elements

python implementation:
----------------------
print(sum([int(i) for i in input() if int(i)%2==0]))

LBP010: Sum of odd digits.
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Implement a program to calculate sum of odd digits present in the given number.

input ---------> A number from the user  
constraint ----> Number>0
output --------> Print sum of odd digits

logic:

sum=0;
while(n!=0)
{
	d=n%10;
	if(d%2!=0)
		sum=sum+d;
	n=n/10;
}
print sum;

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n,d,sum=0;
    scanf("%d",&n);
    while(n!=0)
    {
        d=n%10;
        if(d%2!=0)
            sum=sum+d;
        n=n/10;
    }
    printf("%d",sum);
    return 0;
}

java implementation:
--------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int n=obj.nextInt(),d,sum=0;
        while(n!=0)
        {
            d=n%10;
            if(d%2!=0)
                sum=sum+d;
            n=n/10;
        }
        System.out.println(sum);
    }
}

python implementation:
----------------------
print(sum([int(i) for i in input() if int(i)%2!=0]))

LBP11

Sum of prime Digits 

Implement a program to calculate sum of prime digits present in the given number

input -------------> a number from the user
constraint --------> n>0
output ------------> print sum of prime digits

logic:

digits ----------> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
prime digits ----> 2, 3, 5, 7


sum=0;
while(n!=0)
{	
	d=n%10;
	if(d==2||d==3||d==5||d==7)
		sum=sum+d;
	n=n/10;
}
print sum

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n,d,sum;
    scanf("%d",&n);
    sum=0;
    while(n!=0)
    {
        d=n%10;
        if(d==2||d==3||d==5||d==7)
            sum=sum+d;
        n=n/10;
    }
    printf("%d",sum);
    return 0;
}

java implementation:
--------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int n=obj.nextInt(),sum,d;
        sum=0;
        while(n!=0)
        {
            d=n%10;
            if(d==2||d==3||d==5||d==7)
                sum=sum+d;
            n=n/10;
        }
        System.out.println(sum);
    }
}

python implementation:
---------------------
print(sum([int(i) for i in input() if i in '2357']))

LBP12

Sum of Digits  divisible by 3

Implement a program to calculate sum of digits that are divisible by 3 in the given number

input -------------> a number from the user
constraint --------> n>0
output ------------> print sum of digits that are divisible by 3

logic1:

sum=0;
while(n!=0)
{
	d=n%10;
	if(d%3==0)
		sum=sum+d;
	n=n/10;
}
print sum

logic2:

sum=0;
while(n!=0)
{
	d=n%10;
	if(d==3||d==6||d==9)
		sum=sum+d;
	n=n/10;
}
print sum

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n,sum,d;
    scanf("%d",&n);
    sum=0;
    while(n!=0)
    {
        d=n%10;
        if(d%3==0)
            sum=sum+d;
        n=n/10;
    }
    printf("%d",sum);
    return 0;
}

java implementation:
--------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int d,sum,n = obj.nextInt();
        sum=0;
        while(n!=0)
        {
            d=n%10;
            if(d%3==0)
                sum=sum+d;
            n=n/10;
        }
        System.out.println(sum);
    }
}

python implementation:
----------------------
n=int(input())
sum=0
while n!=0:
    d=n%10
    if d%3==0:
        sum=sum+d
    n=n//10
print(sum)    
    
LBP13

Number of digits

Implement a program to calculate number of digits in the given number

input -------------> a number from the user
constraint --------> n>0
output ------------> print number of digits in the number

Ex:
123		3
12389		5
5		1

logic1:

count=0;
while(n!=0)
{
	count++;
	n=n/10;
}
print count;

logic2:

read the number in the form of string.
find the length of string.

C	strlen(s)
Java	s.length()
Py	len(s)

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n,c=0;
    scanf("%d",&n);
    while(n!=0)
    {
        c++;
        n=n/10;        
    }
    printf("%d",c);
    return 0;
}

java implementation:
-------------------
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        String s = obj.nextLine();
        System.out.println(s.length());
    }
}

python implementation:
----------------------
print(len(input()))


LBP14

Reverse Integer

Given an integer x, return x with its digits reversed. 

input---------> a number from user
constraint ---> n>=0
output -------> reverse of the given number

logic:

rev=0;
while(n!=0)
{
	d = n%10;
	rev = rev*10 +d;
	n=n/10;
}
print rev


Java ----> StringBuffer ---> reverse()
Py ------> s[::-1]

s='abc'

s[::1] ---> abc
s[::-1] ---> cba

s = '123'

s[::-1] ---> 321

https://www.editplus.com

Vovan
3AG46-JJ48E-CEACC-8E6EW-ECUAW

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n,rev,d;
    scanf("%d",&n);
    rev=0;
    while(n!=0)
    {
        d=n%10;
        rev=rev*10+d;
        n=n/10;
    }
    printf("%d",rev);
    return 0;
}

java implementation:
--------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        String s = obj.nextLine();
        StringBuffer sb = new StringBuffer(s);
        sb.reverse();
        System.out.println(sb);
    }
}

python implementation:
-----------------------
s=input()
print(s[::-1])


LBP15

Duck Number

Program to read a number and check whether it is duck number or not.
Hint: A duck number is a number which has zeros present in it, 
but no zero present in the begining of the number.

input-------> a number from the user
contraint --> n>=0
output------> Yes or No

123	No
1023	Yes
1203	Yes
1230	Yes

flag=0;
while(n!=0)
{
	d=n%10;
	if(d==0)
	{
		flag=1;
		break;
	}
	n=n/10;
}

if flag==1 then Yes else No

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n,d,flag;
    scanf("%d",&n);
    flag=0;
    while(n!=0)
    {
        d=n%10;
        if(d==0)
        {
            flag=1;
            break;
        }
        n=n/10;
    }
    printf((flag==1)?"Yes":"No");
    return 0;
}

java implementation:
--------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        String s = obj.nextLine();
        System.out.println((s.contains("0"))?"Yes":"No");
    }
}

python implementation:
----------------------
s=input()
print("Yes" if "0" in s else "No")

LBP16

Number of Occurrences

Program to find number of occurences of the given digit in the number n

input ------> two numbers n and d
constraints-> no constraints
output -----> number of occurrences

1231245621, 1 ----> 3
123, 3 -----------> 1
123, 5 -----------> 0

logic:

read n and key
c=0;
while(n!=0)
{
	d=n%10;
	if(d==key)
		c++;
	n=n/10;
}
print c

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n,d,key,c;
    scanf("%d",&n);
    scanf("%d",&key);
    c=0;
    while(n!=0)
    {
        d=n%10;
        if(d==key)
            c++;
        n=n/10;
    }
    printf("%d",c);
    return 0;
}

java implementation:
--------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int n=obj.nextInt();
        int key=obj.nextInt();
        int d,c=0;
        while(n!=0)
        {
            d=n%10;
            if(d==key)
                c++;
            n=n/10;
        }
        System.out.println(c);
    }
}

python implementation:
----------------------
s=input()
key=input()
print(s.count(key))


LBP17

Paliandrome Number

Program to check whether the given number is paliandrome or not

input -----> a number from the user
constraint-> n>0
output ----> Yes or No

123 ---> No
121 ---> Yes

logic:

read n value
temp = n
rev=0;
while(n!=0)
{
	d = n%10;
	rev = rev*10 +d;
	n=n/10;
}
(rev==temp)?"Yes":"No"

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    int n,rev,temp,d;
    scanf("%d",&n);
    temp=n;
    rev=0;
    while(n!=0)
    {
        d=n%10;
        rev=rev*10+d;
        n=n/10;
    }
    printf((temp==rev)?"Yes":"No");
    return 0;
}


java implementation:
--------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        String s1 = obj.nextLine();
        StringBuffer sb = new StringBuffer(s1);
        sb.reverse();
        String s2 = sb.toString();
        System.out.println((s1.equals(s2))?"Yes":"No");
    }
}

python implementation:
----------------------
s=input()
print("Yes" if s==s[::-1] else "No")



LBP18
Check Birth Day

Lisa always forgets her birthday which is on th 5th July. So develop a function/method which will be helpful to remember her birthday.

The function/method checkBirthday return an integer 1, if it is her birthday else return 0. the function/method checkBirthday accepts two arguments.Month, a string representing the month of her birth and day, an integer representing the data of her birthday.

input -----------> month & day 
constraints -----> no
output ----------> 1 or 0

LBP19
Decimal to Binary

A network protocol specifies how data is exchanged via transmission media. The protocol converts each message into a stream of 1's and 0's. Given a decimal number, write an algorithm to convert the number into a binary form.

input ---------> a number
constraint ----> n>=0
output --------> binary number

LBP20
Lucky Customer

An e-commerce website wishes to find the lucky customer who will be eligible for full value cash back. 
For this purpose,a number N is fed to the system. 
It will return another number that is calculated by an algorithm. 
In the algorithm, a seuence is generated, in which each number n the sum of the preceding number. initially the sequence will have two 1's in it. 
The System will return the Nth number from the generated sequence which is treated as the order ID. The lucky customer will be one who has placed that order. Write an alorithm to help the website find the lucky customer.

input --------> a number
constraint ---> n>0
output -------> a number

LBP21

Christmas offer

An e-commerce company plans to give their customers a special discount for the Christmas, they are planning to offer a flat discount. The discount value is calculated as the sum of all prime digits in the total bill amount.

Write an algorithm to find the discount value for the given total bill amount.

input ----> the input consists of an integer order value representing the total bill amount
condition-> no conditions
output ---> print an integer representing discount value for the given total bill amount.

15720.00 ====> 5+7+2=14%

LBP22
Niven Number

Write a program to accept a number and check and display whether it is a Niven Number or not.
Niven Number is that a number which is divisible by its sum of digits.

input -----> a number
constraint-> n>0
output ----> Niven Number or Not

LBP23
A Special two digit number

A special two digit number is a number such that when the sum of its digits is added to the product of its digits, the result should be equal to the original two-digit number.

Implement a program to accept a two digit number and check whether it is a special two digit number or not.

input -----> a two digit number
constraint-> 10<=n<=99
output ----> special two digit number or not

LBP24
Sum of even numbers

Implement a program to find sum of even number between x and y both are inclusive.

input -----> two int values
constraint-> no
output ----> sum of even numbers between x and y

LBP25
Celsius to Fahrenheit

Create a function/method to convert celsius to fahrenheit.

input ------> celsius
constrint --> no
output -----> Fahrenheit

LBP26
Fahrenheit to Celsius

Program to convert fahrenheit to celsius.

input -------> fahrenheit
constraint --> no
output ------> celsius

LBP27
Find The Sequence Sum

Given three integers i,j&k, a sequence sum to be the value of i+(i+1)+(i+2)..+j+(j-1)+(j-2)+..+k
(increment from i until it equals to j, then decrement from j until equals k). Given values i,j,k. caluclate the sequence sum as described.

int getSequenceSum(int,int,int);

input -------> Three int values
constraints--> no
output ------> sum basd on given constraints


LBP28
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

input --------> a number from the user
constriants --> no
output -------> number of ways



LBP29

Prime Number or Not

Write a program to check whether the given number is prime number or not. A number is said to prime if it is having only two factors. i.e. 1 and number itself.

input ------> a number from the use
constraint--> n>1
output -----> true or false


LBP30

Valid Palindrome

Given a string, determine if it is a Palindrome string or not. A String is Palindrome if it is equal to reverse of the original string.

input ------> A String from the user
constriant--> Non-empty String
output -----> Palindrome or not